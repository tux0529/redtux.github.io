{"posts":[{"title":"让你的各种网络密码无法被人破解","text":"让你的各种网络密码无法被人破解互联网产品各种各样，我们也就拥有了各种各样的帐号密码。网银密码，网站密码等等，大家一般化为了好记，都设置同一个密码，或者很简单的密码。这样就造成自己的帐号被黑客窃取。密码要想不被黑客猜中，有几点非常重要的注意事项 1、不要靠字典中的单词：如果你的密码可以在单词书中找到，那就和没有一样。黑客们经常借助词典以及词汇的变体测试密码.如果你不属于这一类，他们通常就会放弃。 2、一个密码绝对不要使用两次：人们喜欢在不同的网站使用同一密码，这可让黑客有了可乘之机。如果你的LinkedIn账户遭泄露，可能没什么损失;但他们会利用该密码尝试你的电子邮箱、银行账户等一切存储资产及重要个人数据的地方。 3、设置密码短语。密码越长，破解的时间也越长。如果不想让黑客在24小时内能破解你的密码，密码长度应该超过14个字符。因为长密码难于记忆，可考虑用喜欢的电影台词、歌词或一首诗的首字母拼接在一起。 4、胡乱敲击键盘：对于敏感的账户，格罗斯曼先生建议随机乱敲键盘，并间或敲击Shift和Alt键，然后将结果复制到一个文本，存入一个有密码保护的U盘。 5、安全存储你的密码。不要将密码放在收件箱或桌面。如果恶意软件感染电脑，你就完蛋了。格罗斯曼先生将密码文件存入加密U盘，使用帐户时，他把这些密码复制粘贴过去。即便黑客利用键盘记录软件，同样无法捕捉到他的密码。科克先生则把密码提示保存一张纸上，把敏感的信息和互联网彻底隔离。 6、不要依赖密码管理器。密码保护软件可使用户将所有用户名和密码存储在同一区域。有些程序还能为你创建强大的密码，只要你输入主密码，就能帮你自动登录网站。如LastPass、SplashData和AgileBits等等。科克先生认为，即使加密后，密码仍然留在计算机里。如果电脑遭到盗窃，等于丢失所有密码。而且密码管理器不一定靠谱，今年初在阿姆斯特丹举行的安全会议上，黑客们就演示了破解手机密码管理器的技术。 7、安全问题最好答非所问。网站的验证问题经常问道“你最喜欢什么颜色?”“你在哪所中学就读?”，这些问题的答案局限性太大，很容易在互联网上找到。今年初，一名黑客利用米特？罗姆尼(Mitt Romney)最喜欢的宠物的名字破解其Hotmail和Dropbox帐户。比较安全的做法是密码提示和问题无关。如果安全问题问出生医院的名称，你的回答可以是最喜欢的歌词。 8、使用不同的浏览器。不同的网络活动要用不同的浏览器。选择一个浏览器做乱七八糟的事情，如浏览网上论坛、新闻网站、博客等不重要的事情。第二个浏览器用于登录网上银行或收发电子邮件。这样浏览器被攻击后，银行帐户就不一定会泄露。Accuvant Labs去年研究发现，在其所调查的火狐、谷歌Chrome及微软Internet Explorer浏览器中，Chrome最安全。 9、别乱分享你的信息。不要经常利用真实的E-mail地址注册网上帐户。很多“一次性”e-mail地址是最佳选择，如10minutemail.com提供的地址，用户注册、确认在线账户后，这些电子邮件地址会自我销毁。 10、输入任何密码之前一定要搞清楚你当前访问的地址是你想要访问的地址，特别是现在的应用总喜欢用内置的浏览器打开网址，像微信、各个邮箱客户端，打开的网站并不会显示url地址，这样很容易就会碰到李鬼而没有发现。博主最近邮件收到一封自称是纪委的调查邮件，附件是一张二维码，扫码后转到到网易邮箱登录界面，因为是微信打开的网址，所以没有显示地址，用浏览器打开后发现是李鬼，随便用一个账号密码登录之后显示密码错误，然后就转跳到李逵哪里去了。 最后分享一下我的密码设置规则： 我的网络账户被分为3个等级： 1 普通账户，用在一些普通论坛上，比如某一天搜到一个需要的文件在一个论坛里，但是必须注册账户才能下载，这时候就可以用普通账户，可以选择一个统一的账户名和密码，我的用户名就是redtux，密码是好多年前在一个网站上看到的一句话的首字母缩写。用户名要选择一个不容易重复的，我的这个组合用了10多年了，很多时候在一个网站注册的时候发现用户名已经注册了，我就用我的固定账户密码登录就可以进去了。 2 知名一点的账户，QQ，微信，百度，网易之类，用普通账户的密码跟对应网站的名字组合，比如网易密码可以是 普通密码@WangYi，你只要记住一个固定的组合规则，登录的时候就自动能生成密码。 3 涉及财产安全的，银行类，支付宝类的，方法同2，但是生成规则更复杂一点，比如可以加入更多的特殊符号。 这样子就只要记住一个密码和2种规则，就能保证所有账户的密码都不一样，如果其中一个网站被暴库也能保证其他网站的账号安全。","link":"/2018/02/10/skills-password/"},{"title":"Ubuntu Server 常用管理","text":"1.重启网络服务： sudo /etc/init.d/networking restart 或者： service networking restart 2.设置Nameserver（2种方法）： 修改/etc/resolv.conf，但此文件会被resolvconf重写，故应该修改resolvconf配置文件/etc/resolvconf/resolv.conf.d/head， 增加：nameserver 202.96.209.133 修改/etc/network/interfaces，DNS对应的参数名为dns-nameservers，这里设置的优先级比上一种方法高。如果两种方法都设置了，则都会出现在/etc/resolv.conf中。 3.将用户加入 group：usermod -G groupname username (这种会把用户从其他组中去掉，只属于该组)如：usermod -G git git (git只属于git组) usermod -a -G groupname username (把用户添加到这个组，之前所属组不影响)如：usermod -a -G www git (git属于之前git组，也属于www组) 1234567891011121314xxx@xxxx:~$ cat /etc/group|grep user1user1:x:999:user1xxx@xxxx:~$ cat /etc/group|grep sudosudo:x:27:xxx@xxxx:~$ usermod -G 27 user1xxx@xxxx:~$ cat /etc/group|grep sudosudo:x:27:user1xxx@xxxx:~$ cat /etc/group|grep user1user1:x:999:xxx@xxxx:~$ usermod -a -G 999 user1xxx@xxxx:~$ cat /etc/group|grep user1user1:x:999:user1xxx@xxxx:~$ cat /etc/group|grep sudosudo:x:27:user1 1xxx@xxxx:~$ useradd -r -m -s /bin/bash -G 27 test1 4.修改时区和时间： 首先查看时区： 12redtux@redtux-PC:~$ date -RThu, 31 May 2018 00:03:22 +0800 修改时区，执行sudo tzselect，按提示选择时区. 复制文件到/etc目录下 sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 更新时间 sudo ntpdate time.windows.com 5.搜索文件夹并删除1find ./* -name &quot;@eaDir&quot; -type d -print0 | xargs -0 rm -rf 6.gdisk硬盘分区工具gdisk是fdisk分区工具的GPT版，MBR分区格式只能支持最大2T的硬盘，大于2T的硬盘必须采用GPT格式，gdisk就是针对GPT格式的升级版。 gdisk -l /dev/sdX 查看分区信息 gdisk (?|m) 帮助 n 建立分区 d 删除分区 c 更改分区名字 I 显示分区的详细信息 p 显示分区信息 t 转换分区类型 a 将指定分区设置/取消 活动分区 l 查看分区类型 o 重建分区表 v 验证分区表，显示剩余没有被分区划分的扇区数量 q 退出不保存，不保存，所有的修改都不生效 w 退出并保存 执行gdisk /dev/sdx对sdx硬盘进行编辑，分区表编辑完成保存后，需要重新启动系统，否则系统内核还不知道硬盘分区已经改变了，这个时候你ls /dev/sd*查看到的分区情况还是编辑之前的。 7.blkid 列出所有分区的uuid硬盘根据插拔接口顺序不同可能是sda，也可能是sdb，这样重启后会不能正确的挂载所有的硬盘，为解决这个问题，UUID被文件系统设计者采用，使其可以持久唯一标识一个硬盘分区。其实方式很简单，就是在文件系统的超级块中使用128位存放UUID。这个UUID是在使用文件系统格式化分区时计算生成的，例如Linux下的文件系统工具mkfs就在格式化分区的同时，生成UUID并把它记录到超级块的固定区域中。 使用mkfs对分区格式化后，会显示分区的uuid，如果我们没有记录下来后面怎么查呢，这个就要用到blkid工具了，他可以列出系统中所有硬盘分区的uuid。 8.rsync 远程同步工具rsync 是一个常用的 Linux 应用程序，用于文件同步。 它可以在本地计算机与远程计算机之间，或者两个本地目录之间同步文件（但不支持两台远程计算机之间的同步）。它也可以当作文件复制工具，替代cp和mv命令。 它名称里面的r指的是 remote，rsync 其实就是”远程同步”（remote sync）的意思。与其他文件传输工具（如 FTP 或 scp）不同，rsync 的最大特点是会检查发送方和接收方已有的文件，仅传输有变动的部分（默认规则是文件大小或修改时间有变动）。 用法参考文章 -r 参数本机使用 rsync 命令时，可以作为cp和mv命令的替代方法，将源目录同步到目标目录。 1$ rsync -r source destination 上面命令中，-r表示递归，即包含子目录。注意，-r是必须的，否则 rsync 运行不会成功。source目录表示源目录，destination表示目标目录。 如果有多个文件或目录需要同步，可以写成下面这样。 1$ rsync -r source1 source2 destination 上面命令中，source1、source2都会被同步到destination目录。 -a 参数-a参数可以替代-r，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以-a比-r更有用。下面的用法才是常见的写法。 1$ rsync -a source destination 目标目录destination如果不存在，rsync 会自动创建。执行上面的命令后，源目录source被完整地复制到了目标目录destination下面，即形成了destination/source的目录结构。 如果只想同步源目录source里面的内容到目标目录destination，则需要在源目录后面加上斜杠。 1$ rsync -a source/ destination 上面命令执行后，source目录里面的内容，就都被复制到了destination目录里面，并不会在destination下面创建一个source子目录。 -n 参数如果不确定 rsync 执行后会产生什么结果，可以先用-n或–dry-run参数模拟执行的结果。 1$ rsync -anv source/ destination 上面命令中，-n参数模拟命令执行的结果，并不真的执行命令。-v参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。 –delete 参数默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用–delete参数，这将删除只存在于目标目录、不存在于源目录的文件。 1$ rsync -av --delete source/ destination 上面命令中，–delete参数会使得destination成为source的一个镜像。 –exclude 参数有时，我们希望同步时排除某些文件或目录，这时可以用–exclude参数指定排除模式。 123$ rsync -av --exclude='*.txt' source/ destination# 或者$ rsync -av --exclude '*.txt' source/ destination 上面命令排除了所有 TXT 文件。 注意，rsync 会同步以”点”开头的隐藏文件，如果要排除隐藏文件，可以这样写–exclude=”.*”。 如果要排除某个目录里面的所有文件，但不希望排除目录本身，可以写成下面这样。 1$ rsync -av --exclude 'dir1/*' source/ destination 多个排除模式，可以用多个–exclude参数。 1$ rsync -av --exclude 'file1.txt' --exclude 'dir1/*' source/ destination 多个排除模式也可以利用 Bash 的大扩号的扩展功能，只用一个–exclude参数。 1$ rsync -av --exclude={'file1.txt','dir1/*'} source/ destination 如果排除模式很多，可以将它们写入一个文件，每个模式一行，然后用–exclude-from参数指定这个文件。 1$ rsync -av --exclude-from='exclude-file.txt' source/ destination –include 参数–include参数用来指定必须同步的文件模式，往往与–exclude结合使用。 1$ rsync -av --include=&quot;*.txt&quot; --exclude='*' source/ destination 上面命令指定同步时，排除所有文件，但是会包括 TXT 文件。 增量备份rsync 的最大特点就是它可以完成增量备份，也就是默认只复制有变动的文件。 除了源目录与目标目录直接比较，rsync 还支持使用基准目录，即将源目录与基准目录之间变动的部分，同步到目标目录。 具体做法是，第一次同步是全量备份，所有文件在基准目录里面同步一份。以后每一次同步都是增量备份，只同步源目录与基准目录之间有变动的部分，将这部分保存在一个新的目标目录。这个新的目标目录之中，也是包含所有文件，但实际上，只有那些变动过的文件是存在于该目录，其他没有变动的文件都是指向基准目录文件的硬链接。 –link-dest参数用来指定同步时的基准目录。 1$ rsync -a --delete --link-dest /compare/path /source/path /target/path 上面命令中，–link-dest参数指定基准目录/compare/path，然后源目录/source/path跟基准目录进行比较，找出变动的文件，将它们拷贝到目标目录/target/path。那些没变动的文件则会生成硬链接。这个命令的第一次备份时是全量备份，后面就都是增量备份了。 下面是一个脚本示例，备份用户的主目录。 123456789101112131415161718192021222324#!/bin/bash# A script to perform incremental backups using rsyncset -o errexitset -o nounsetset -o pipefailreadonly SOURCE_DIR=&quot;${HOME}&quot;readonly BACKUP_DIR=&quot;/mnt/data/backups&quot;readonly DATETIME=&quot;$(date '+%Y-%m-%d_%H:%M:%S')&quot;readonly BACKUP_PATH=&quot;${BACKUP_DIR}/${DATETIME}&quot;readonly LATEST_LINK=&quot;${BACKUP_DIR}/latest&quot;mkdir -p &quot;${BACKUP_DIR}&quot;rsync -av --delete \\ &quot;${SOURCE_DIR}/&quot; \\ --link-dest &quot;${LATEST_LINK}&quot; \\ --exclude=&quot;.cache&quot; \\ &quot;${BACKUP_PATH}&quot;rm -rf &quot;${LATEST_LINK}&quot;ln -s &quot;${BACKUP_PATH}&quot; &quot;${LATEST_LINK}&quot; 上面脚本中，每一次同步都会生成一个新目录${BACKUP_DIR}/${DATETIME}，并将软链接${BACKUP_DIR}/latest指向这个目录。下一次备份时，就将${BACKUP_DIR}/latest作为基准目录，生成新的备份目录。最后，再将软链接${BACKUP_DIR}/latest指向新的备份目录。","link":"/2023/08/18/ubuntu-server/"},{"title":"macOS系统使用技巧","text":"1.tree命令自定义mac下默认是没有 tree命令的，不过我们可以使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令： 1$ find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g' 当然你也可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了: 1alias tree=&quot;find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'&quot; 安装tree命令行工具也可以使用 homebrew 安装 tree 命令行：brew install tree 这样就在你的mac上安装了 tree 命令行了。 tree命令行参数（只实用与安装了tree命令行工具）： -a 显示所有文件和目录。 -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。 -C 在文件和目录清单加上色彩，便于区分各种类型。 -d 显示目录名称而非内容。 -D 列出文件或目录的更改时间。 -f 在每个文件或目录之前，显示完整的相对路径名称。 -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。 -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。 -i 不以阶梯状列出文件或目录名称。 -I 不显示符合范本样式的文件或目录名称。 -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。 -n 不在文件和目录清单加上色彩。 -N 直接列出文件和目录名称，包括控制字符。 -p 列出权限标示。 -P 只显示符合范本样式的文件或目录名称。 -q 用”?”号取代控制字符，列出文件和目录名称。 -s 列出文件或目录大小。 -t 用文件和目录的更改时间排序。 -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。 -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。 2.改变APP图标最近发现有些APP图标实在是难看，忍不住想换个标，就在网上查了下资料，MacOS系统提供了生成icns的命令，我们需要准备一张png的图，这张图最小要1024*1024的分辨率。 制作步骤： 找图找一张分辨率1024*1024的png图片 建图片集目录打开终端输入以下命令：mkdir xxx. iconset注意：必须以.iconset后缀结尾 转换图片把原图片转为不同大小的图片，并放入上面的创建的目录中sips -z 16 16 pic.png –out xxx.iconset/icon_16x16.pngsips -z 32 32 pic.png –out xxx.iconset/icon_16x16@2x.pngsips -z 32 32 pic.png –out xxx.iconset/icon_32x32.pngsips -z 64 64 pic.png –out xxx.iconset/icon_32x32@2x.pngsips -z 128 128 pic.png –out xxx.iconset/icon_128x128.pngsips -z 256 256 pic.png –out xxx.iconset/icon_128x128@2x.pngsips -z 256 256 pic.png –out xxx.iconset/icon_256x256.pngsips -z 512 512 pic.png –out xxx.iconset/icon_256x256@2x.pngsips -z 512 512 pic.png –out xxx.iconset/icon_512x512.pngsips -z 1024 1024 pic.png –out xxx.iconset/icon_512x512@2x.png@2x 的是为retina屏准备的，以上命令执行完后去目录里看下图片是否生成好了 生成图标这一步就是制作icns的最后一步了在命令行中输入一下命令iconutil -c icns xxx.iconset -o xxx.icns这时，目录中就会出现你要的icns图标文件了 替换图标在应用程序中找到想要替换的APP，右键，显示简介，然后把刚才的icns文件拖到简介里就可以了，替换完了之后需要把APP退出后才能看到新的图标。 批量制作可以把制作过程写成一个shell文件，保存成.sh文件，这样就可以批量生成不同大小的图片并执行iconutil命令 123456789101112131415161718192021222324252627282930313233343536373839#!/bin/shif [ x&quot;$1&quot; = x ]; then echo &quot;\\033[31m 请输入要转换的图片全名(PNG格式的图片) \\033[0m&quot; exitfiecho $1newstr=$(tr '[A-Z]' '[a-z]' &lt;&lt;&lt;&quot;$1&quot;)if [[ $newstr != *.png ]]; then echo &quot;\\033[31m 图片不是png格式 \\033[0m&quot; exitfiif [ x&quot;$2&quot; = x ]; then echo &quot;\\033[31m 请输入iconset目录(命名方式xxx.iconset, 务必以 .iconset 结尾) \\033[0m&quot; exitfiif [[ $2 != *.iconset ]]; then echo &quot;\\033[31m iconset目录命令不规范 \\033[0m&quot; exitfi# 生成的图片名name_array=(&quot;icon_16x16.png&quot; &quot;icon_16x16@2x.png&quot; &quot;icon_32x32.png&quot; &quot;icon_32x32@2x.png&quot; &quot;icon_128x128.png&quot; &quot;icon_128x128@2x.png&quot; &quot;icon_256x256.png&quot; &quot;icon_256x256@2x.png&quot; &quot;icon_512x512.png&quot; &quot;icon_512x512@2x.png&quot;)#尺寸size_array=(&quot;16&quot; &quot;32&quot; &quot;32&quot; &quot;64&quot; &quot;128&quot; &quot;256&quot; &quot;256&quot; &quot;512&quot; &quot;512&quot; &quot;1024&quot;)# 创建 iconset 目录if [ ! -d $2 ]; then mkdir $2fifor ((i = 0; i &lt; ${#name_array[@]}; ++i)); do m_dir=$2/${name_array[i]} sips -z ${size_array[i]} ${size_array[i]} $1 --out $m_dirdone# 生成icns 命令iconutil -c icns $2 -o ${2%*&quot;.iconset&quot;}.icns# 生成完之后删除 iconset 文件夹rm -rf $2; 图标下载当然，你也可以去下载现成的 macOS Big Sur - Replacements Icons 图标还原如果想恢复成默认图标，只需要在对应的APP图标上“右键”&gt;“显示简介”，然后选中左上角的图标，按delete键就好了","link":"/2022/08/10/macOS-helper/"},{"title":"Xcode命令行工具Command Line Tools","text":"一般Xcode安装后，第一次打开时，会弹窗提示安装Command Line Tools，直接安装即可。 如果当时没有安装，后面也可以单独安装。 123xcode-select --install // 安装命令xcode-select --version // 查看版本 有时Command Line Tools出了问题，可以先尝试恢复默认设置来解决： 12// 恢复默认设置（需要sudo权限）sudo xcode-select --reset 还是解决不了，可以考虑删掉后重新安装： 12345// 强制删除安装目录下的文件sudo rm -rf /Library/Developer/CommandLineTools// 重新安装xcode-select --install 除了终端命令的安装方式，也可以到苹果开发者官网的下载专区搜索Command Line Tools并下载安装包。你也可以去xcodereleases网站找到各种版本Xcode的下载链接。","link":"/2023/08/02/xcode-command-line-tools/"},{"title":"QLineEdit获取焦点后全选字符&#x2F;失去焦点清除选择","text":"一直觉得Chrome的地址栏的体验非常好，获取焦点后自动全选，无论是想复制地址还是重新输入新的地址都帮我们省掉了一步，如何用QLineEdit实现这个特点呢。 网上搜索了一下，发现一篇博客http://www.cnblogs.com/91program/p/5521420.html ，但是这篇博客讲述的方法有点复杂，最后还要通过延时来达到目的，有点怪异。 最后只得查看QLineEdit的类参考仿照Chrome实现，Chrome的地址栏在无焦点状态下鼠标按下不动的时候，地址栏获取了焦点，光标位于鼠标位置；鼠标无移动释放，全选地址栏字符；再次单击，清除全选；鼠标按下移动后释放，则不会全选，而是选择字符；地址栏失去焦点，清除选择。 看起来我们需要判断鼠标按下时的位置与鼠标释放时鼠标有没有移动，申请一个变量m_pressPos来存储鼠标按下时的位置。还需要知道鼠标单击的时候QLineEdit是否已获得焦点，我们用变量m_onFocus来记录。定义一个QLineEdit子类，然后重新实现mousePressEvent，mouseReleaseEvent，focusOutEvent。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#ifndef URLLINEEDIT_H#define URLLINEEDIT_H#include &lt;QLineEdit&gt;class UrlLineEdit : public QLineEdit{ Q_OBJECTpublic: UrlLineEdit(QWidget *parent = 0); ~UrlLineEdit();protected: void mouseReleaseEvent(QMouseEvent *e); void mousePressEvent(QMouseEvent *e); void focusOutEvent( QFocusEvent * e );private: bool m_onFocus; QPoint m_pressPos;};#endif // URLLINEEDIT_H#include &quot;urllineedit.h&quot;#include &lt;QFocusEvent&gt;UrlLineEdit::UrlLineEdit(QWidget *parent) :QLineEdit(parent), m_onFocus(false){}UrlLineEdit::~UrlLineEdit(){}void UrlLineEdit::mouseReleaseEvent(QMouseEvent *e){ if (e-&gt;button() == Qt::LeftButton ){ if( e-&gt;pos() == m_pressPos &amp;&amp; !m_onFocus){ m_onFocus = true; selectAll(); update(); } else { int start = cursorPositionAt(m_pressPos); setSelection( start , cursorPositionAt(e-&gt;pos())-start ); } } QLineEdit::mouseReleaseEvent(e);}void UrlLineEdit::mousePressEvent(QMouseEvent *e){ if (e-&gt;button() == Qt::LeftButton){ m_pressPos = e-&gt;pos(); setCursorPosition(cursorPositionAt(m_pressPos)); } QLineEdit::mousePressEvent(e);}void UrlLineEdit::focusOutEvent(QFocusEvent *e){ m_onFocus = false; if(!hasSelectedText()){ deselect(); } QLineEdit::focusOutEvent(e);} 通过测试基本上是实现了类似Chrome的这个特性。","link":"/2022/08/11/Qt/qt-qlineedit-focus/"},{"title":"Qt生成缩略图片存入sqlite","text":"Qt生成缩略图片存入sqlite新建一个工程pro文件中加入 QT += sql 添加sql支持。 >folded12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970// main.cpp#include &lt;QApplication&gt;#include &lt;QtGui&gt;#include &lt;QSqlDatabase&gt;#include &lt;QSqlError&gt;#include &lt;QSqlQuery&gt;int main(int argc, char *argv[]){ QApplication a(argc, argv); //添加数据库,不表 QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;, &quot;conn1&quot;); db.setDatabaseName(&quot;/home/htux/thumbs.sqlite&quot;); if(!db.open()) return 1; QByteArray baImage; QString filename = &quot;/home/htux/file2.jpg&quot;; QPixmap pixmapIn(filename); QBuffer buffer(&amp;baImage); buffer.open(QIODevice::WriteOnly); QPixmap pixmapSmall; //让生成的缩略图高宽都不超过256. pixmapSmall = pixmapIn.scaled(256,256, Qt::KeepAspectRatio, Qt::SmoothTransformation); //保存生成的缩略图到ByteArray, 格式为JPG, 图片质量50. //图片质量的取值Qt文档中没查到,不过按照国际惯例应该是0-100 //保存几个不同质量的图片看看差别 pixmapSmall.save(&amp;buffer, &quot;JPG&quot;,50); pixmapSmall.save(&quot;/home/htux/file2.png&quot;, &quot;PNG&quot;); pixmapSmall.save(&quot;/home/htux/file2-5.jpg&quot;, &quot;JPG&quot;, 20); pixmapSmall.save(&quot;/home/htux/file2-5.jpg&quot;, &quot;JPG&quot;, 50); pixmapSmall.save(&quot;/home/htux/file2-8.jpg&quot;, &quot;JPG&quot;, 80); QSqlQuery query(db); query.exec(&quot;CREATE TABLE thumbs &quot; &quot;(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,&quot; &quot; filename VCHAR(20) , thumbnail BLOB);&quot;); QString sql = QString(&quot;INSERT INTO thumbs VALUES &quot; &quot;( NULL , :filename, :thumbnail );&quot;); query.prepare(sql); query.bindValue(&quot;:filename&quot;, filename); query.bindValue(&quot;:thumbnail&quot;, baImage); query.exec(); query.exec(&quot;select * from thumbs;&quot;); //跳到最后存入的记录 if (!query.last()) return 1; QPixmap pixmapOut; //读出存入的图片 pixmapOut.loadFromData(query.value(2).toByteArray()); db.close(); //把图片用Label显示出来. QLabel label; label.setPixmap(pixmapOut); label.show(); return a.exec();}","link":"/2022/08/11/Qt/qt-sqlite-image/"},{"title":"安装Bind9用于本地域名解析","text":"对于家里的移动客户端，在家的时候用Wi-Fi，在外的时候用的移动网，那我们希望在家用Wi-Fi的时候可以直接连内网ip，而不需要连公网ip再转发到Nas的内网ip。以前用小米路由器的时候可以自定义hosts，非常方便。群晖中有一个DNS Server套件可以实现域名直接解析到内网IP，Ubuntu中可以安装Bind9实现同样功能。 Bind9的官方Howto在这里 Bind9安装 12sudo apt updatesudo apt install bind9 Bind9的配置文件位于/etc/bind/，主要配置文件为下面的三个： 123/etc/bind/named.conf/etc/bind/named.conf.options/etc/bind/named.conf.local 配置转发DNS地址，就是当本地没有解析记录的，就转发到指定的DNS地址解析。编辑配置文件/etc/bind/named.conf.options，指定转发DNS，一般填大网络公司的公共DNS，谷歌8.8.8.8；阿里：223.5.5.5等: 12345678[...]forwarders { 8.8.8.8; 114.114.114.114;};[...] 现在Bind9就可以工作了，重启Bind9: 1sudo service bind9 restart 现在就可以在路由器的DHCP设置中将DNS服务器地址设置为NAS的IP了。 接下来我们要编辑区域文件/etc/bind/named.conf.local，增加我们要解析的域名Zone: 12345678[...]zone &quot;example.com&quot; { type master; file &quot;/etc/bind/db.example.com&quot;;};[...] 这一段记录example.com域名的解析文件为/etc/bind/db.example.com，接下来我们编辑/etc/bind/db.example.com，/etc/bind目录中有一份样板文件db.local: 1sudo cp /etc/bind/db.local /etc/bind/db.example.com 编辑区域文件/etc/bind/db.example.com，把localhost修改为你的域名example.com，保留后面的点，把127.0.0.1修改为本机IP，root.localhost. 修改为邮件地址，只不过要把@替换为.，同样末尾点保留。 增加一条A记录，把ns.example.com解析到DNS服务器IP，然后就可以添加其他子域名解析，比如我只有一台NAS，所有的记录都解析到NAS的IP上，修改完大概就是这样子： 1234567891011121314151617;; BIND data file for local loopback interface;$TTL 604800@ IN SOA ns.example.com. root.example.com. ( 1 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 604800 ) ; Negative Cache TTL;@ IN NS ns.example.com.ns IN A 192.168.1.10;also list other computerswww IN A 192.168.1.10music IN A 192.168.1.10 这样内网访问www.example.com和music.example.com都会解析到192.168.1.10。 注意每次修改此文件，都需要把Serial值增加一次，这样重启的时候Bind9就会知道配置文件有修改。 很多人喜欢用修改日期来作为Serial的值，例如 2023080500，表示2023年8月5日第一次修改。 修改完成后记得重启bind9： 1sudo service bind9 restart 这样移动设备连接内网的时候，从路由器获取的DNS服务器就是你的NAS地址，NAS就会把你的域名解析到NAS上。这样你就可以用一个域名根据网络环境自动切换内网和外网了。","link":"/2023/08/05/Nas/bind9-dns-server/"},{"title":"安装Samba用于本地文件分享","text":"Samba安装 12sudo apt updatesudo apt install samba 配置用户，为用户设置密码 1sudo smbpasswd -a [user] 编辑配置文件 1sudo vi /etc/samba/smb.conf 在配置文件末尾增加一段需要分享的目录设置 12345678[ShareData]comment = share folderpath = /path/dataavailable = yesbrowseable = yeswriteable = yesread only = novalid users = [user] [ShareData]是访问分享文件时显示的分享名称；path指向分享文件的真实路径；[user]为访问分享文件的用户名，跟上面设置密码时的用户名一致；这一段可以重复添加，有几处需要分享就可以添加几次，保证每个分享名称不一样就可以了。 重启Samba服务 1sudo service smbd restart 接下来就可以从局域网其他客户端smb://IP访问分享的文件了。","link":"/2023/08/05/Nas/samba-guide/"},{"title":"安装docker及docker-compose","text":"卸载旧版本在你安装docker之前一定要把系统中的旧版本卸载掉，一半系统发行商在官方apt源中带有docker，但是不是最新版的，如果你是全新安装的系统，你还没有安装过docker，那就可以省掉这一步。 需要卸载掉的非官方包包括: docker.io docker-compose docker-doc podman-docker 运行如下命令卸载这些包： 1$for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done apt-get 可能会提示你这些包没有安装。 Images, containers, volumes, and networks 存储在 /var/lib/docker/ 目录中不会自动删除，如果你想要一个全新安装的docker，你最好手动删除他们。 安装途径你可以根据你的需要使用如下方法安装docker： 安装docker桌面版，桌面版包含了docker，这是最简单最快捷的方法； 从Docker的官方apt库安装； 自己手动安装； 用脚本自动安装，只推荐用在测试和开发环境中。 从Docker的官方apt库安装在新装系统第一次安装Docker之前，首先要设置Docker的官方apt库，设置apt库之后就可以使用apt命令安装了。 设置Docker的官方apt库按照如下命令，安装一些工具和允许使用https协议： 12sudo apt-get updatesudo apt-get install ca-certificates curl gnupg 添加Docker的官方GPG key: 123sudo install -m 0755 -d /etc/apt/keyringscurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpgsudo chmod a+r /etc/apt/keyrings/docker.gpg 按照如下命令设置Docker的官方apt库： 1234echo \\ &quot;deb [arch=&quot;$(dpkg --print-architecture)&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ &quot;$(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;)&quot; stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null 注意 If you use an Ubuntu derivative distro, such as Linux Mint, you may need to use UBUNTU_CODENAME instead of VERSION_CODENAME. 更新包索引： 1sudo apt-get update 安装 Docker Engine 运行如下命令安装最新版Docker： 1sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 如果要安装特定版本Docker，可以先用如下命令列出可用版本： 12# List the available versions:$ apt-cache madison docker-ce | awk '{ print $3 }' 返回可用的版本号： 1235:24.0.0-1~ubuntu.22.04~jammy5:23.0.6-1~ubuntu.22.04~jammy&lt;...&gt; 选择你期望的版本进行安装： 12VERSION_STRING=5:24.0.0-1~ubuntu.22.04~jammysudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin 运行一下 hello-world 镜像验证Docker是否安装成功。 1sudo docker run hello-world 这条命令会下载hello-world镜像，并在一个新建的容器中运行。 到此Docker就已经安装成功了。 安装 docker-compose先去docker-compose的Github下载最新版二进制文件，然后复制到PATH路径中 卸载 Docker Engine1.Uninstall the Docker Engine, CLI, containerd, and Docker Compose packages: 1sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras 2.Images, containers, volumes, or custom configuration files on your host aren’t automatically removed. To delete all images, containers, and volumes: 12sudo rm -rf /var/lib/dockersudo rm -rf /var/lib/containerd You have to delete any edited configuration files manually. Docker常用命令 docker start : 启动一个容器 docker restart : 重新启动一个容器 docker stop : 关闭一个容器 docker status : 查看docker运行状态 docker ps : 列出正在运行的容器 docker volume : 新建docker卷 docker run : 从一个镜像放在新建的容器中运行。 其他详细命令可以参考官方文档 其他特定命令：获取容器ID为282c7625119d的ip 1docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 282c7625119d 启动所有容器： 1docker start $(docker ps -aq) 关闭所有容器： 1docker stop $(docker ps -aq) 创建时设置容器开机自启： 1docker run -d --restart=always -name 容器名 使用镜像 修改已有容器开机自启： 12docker update --restart=always 容器ID(或者容器名)（容器ID或者容器名根据实际情况修改） 对已有docker容器增加新的端口映射 1、 docker ps -a #查看容器的信息 2、 docker port 容器ID/容器名称 #查看容器的端口映射情况 3、 docker inspect 容器ID |grep Id #查找要修改容器的全ID 4、 cd /var/lib/docker/containers/全ID #进到全Id相同的目录，修改 其中的hostconfig.json 和 config.v2.json文件： #注意：若该容器还在运行中，需要先停掉 docker stop 容器ID #再停掉docker服务 systemctl stop docker 5、修改hostconfig.json如下 # 格式如：”{容器内部端口}/tcp”:[{“HostIp”:””,”HostPort”:”映射的宿主机端口”}]“PortBindings”:{“22/tcp”:[{“HostIp”:””,”HostPort”:”3316”}],”80/tcp”:[{“HostIp”:””,”HostPort”:”180”}]} {“5432/tcp”:[{“HostIp”:””,”HostPort”:”5432”}]} 6、修改config.v2.json在ExposedPorts中加上要暴露的端口 # 格式如：”{容器内部端口}/tcp”:{} “ExposedPorts”:{“22/tcp”:{},”80/tcp”:{}} {“5432/tcp”:{}}","link":"/2023/08/05/Nas/docker-docker-compose/"},{"title":"删除系统自带的snap","text":"snap list可以查看已经安装的包，默认带的组件是core、lxd、snapd。 删除一个snap包 1sudo snap remove docker 卸载snap 1sudo apt autoremove --purge snapd 这样就会连带snap安装的所有软件全部都卸载掉了。","link":"/2023/08/05/Nas/remove-snap/"},{"title":"安装可道云Kodexplorer","text":"可道云Kodexplorer是一个基于web的文件管理器，这里可以查看官方文档。 nginx配置文件12345678910111213141516171819202122server { listen 620 default_server; listen [::]:620 default_server; root /var/www/kodexplorer; index index.php server_name www.redtux.cn; location / { try_files $uri $uri/ =404; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php8.1-fpm.sock; # fastcgi_pass 127.0.0.1:9000; } location ~ /\\.ht { deny all; }} php库缺失 curlphp库缺失 mb_string须开启php GD库,否则验证码、缩略图使用将不正常 配置优化 修改nginx的配置文件 12345678client_max_body_size 500M; client_header_timeout 3600s;client_body_timeout 3600s;fastcgi_connect_timeout 3600s;fastcgi_send_timeout 3600s;fastcgi_read_timeout 3600s;# 其他webserver相应修改类似限制;如apache需要修改LimitRequestBody# 修改完成重启nginx生效: service nginx reload 修改php配置文件php.ini; 12345678910111213141516post_max_size = 500M;upload_max_filesize = 500M;memory_limit = 500M;max_execution_time = 3600;max_input_time = 3600;# php中设置set_time_limit无效(safe_mode=on时php代码中修改超时无效) php.inisafe_mode = off# php-fpm.conf 配置优化(超时时间; 4G内存推荐如下子进程配置)request_terminate_timeout 3600pm.max_children = 50pm.start_servers = 10pm.min_spare_servers = 10pm.max_spare_servers = 30pm.max_requests = 500 注意: 如果某一类例如exe文件不能上传,其他文件可上传, 一般是服务器(杀毒软件或防火墙)做了拦截误判,取消相应软件上拦截即可; 超时时间设置; 如果经常有超大文件上传,php和nginx超时时间需要设置大一些; 分片上传: 一个大文件切分成多个分片上传,所有片上传完成后服务器自动合并;一个分片上传失败只需要重传该分片即可; 分片大小设置: 管理员登陆后台–基础设置–上传下载; 调整上传分片大小; 必须小于php.ini和nginx的限制; 修改了php或nginx配置文件后,需要重启php-fpm和nginx; 上传文件限制及超时时间可以根据自己需求设置; 超时时间需大于文件上传下载的时间,否则超时会导致操作失败; 修改可道云配置 设置方法：管理员登陆可道云进入后台 系统设置—基础设置—上传/下载 设置分片大小: 推荐5M 大文件上传时切分成片进行并发上传,从而实现加速和断点续传,推荐5M; 此值必须小于下述配置;否则会引起上传异常(上传失败,进度回退)php.ini: post_max_size, upload_max_filesize ==&gt; 5Mnginx: client_max_body_size ==&gt; 5M; 上传并发数量; 推荐15个并发; nginx + php-fpm上传优化 在nginx.conf中添加如下代码，参考更多nginx优化 1234#使用共享内存做临时存贮提高上传速度，共享内存需要大一些，否则上传大文件内存不足client_body_in_file_only clean;client_body_temp_path /dev/shm 1 2;fastcgi_param REQUEST_BODY_FILE $request_body_file;","link":"/2023/08/05/Nas/kodexplorer/"},{"title":"替代群晖相册的工具：immich","text":"一直以来，我都用群晖自带的 Photos 来备份手机照片，因为除了群晖相册之外，还没用过其他好用的相册工具，自从上次群晖文件系统都变成只读之后就有了用Ubuntu替换群晖的想法。然后就在网络中发现了Immich，immich有Android手机客户端，可以直接从f-droid安装。 官方部署教程 下面简要记录部署教程： 下载安装部署必要文件我们使用docker-compose部署，首先创建一个存储docker-compose.yml 和 .env 文件的目录. 12mkdir ./immich-appcd ./immich-app 下载docker-compose.yml 和 example.env文件 下载docker-compose.yml文件 1wget https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml 下载.env文件 1wget -O .env https://github.com/immich-app/immich/releases/latest/download/example.env 或者用浏览器下载这两个文件，然后放到刚刚创建的目录中。 Note: If you downloaded the files from your browser, also ensure that you rename example.env to .env. 修改.env文件中的变量值 Populate custom database information if necessary. UPLOAD_LOCATION 设置成你的照片存储路径. DB_PASSWORD 设置数据库的密码 TYPESENSE_API_KEY 设置成随机字符串。 可以修改docker-compose.yml文件，在Postgres数据库那里增加5432端口映射，把Postgres容器的5432端口映射到本地，这样后期本地安装应用的时候可以用到docker的数据库。 创建容器From the directory you created in Step 1, (which should now contain your customized docker-compose.yml and .env files) run docker-compose up -d. Start the containers using docker compose command 1docker-compose up -d # or `docker compose up -d` based on your docker-compose version 现在可以访问http://&lt;machine-ip-address&gt;:2283开始创建你的管理员账户了。 设置Nginx反向代理12345678910111213141516171819202122232425262728293031323334353637383940414243server { listen 618 default_server; listen [::]:618 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don't use them in a production server! # # include snippets/snakeoil.conf; #root /var/www/start; # Add index.php to the list if you are using PHP #index index.html index.htm index.nginx-debian.html; server_name www.redtux.cn; client_max_body_size 50000M; location / { proxy_pass http://127.0.0.1:2283; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; # http://nginx.org/en/docs/http/websocket.html proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_redirect off; }} 桌面系统上传工具依赖 Node.js 16以上版本和npm 安装node.js后执行如下命令安装immich桌面端上传工具： 1npm i -g immich 把本地目录~/toUpload中的照片上传到服务器： 1immich upload --key sikjo7P3o5jLddv3pfiDjH3RVfj4yIuptOti8SetM --server http://192.168.0.6:2283/api --recursive ~/toUpload 把本地目录~/toUpload中的照片上传到服务器，并加入到AlbumName相册中： 1immich upload --key sikjo7P3o5jLddv3pfiDjH3RVfj4yIuptOti8SetM --server http://192.168.0.6:2283/api --recursive --album AlbumName ~/toUpload 选项： Parameter Description –yes / -y Assume yes on all interactive prompts –recursive / -r Include subfolders –delete / -da Delete local assets after upload –key / -k User’s API key –server / -s Immich’s server address –threads / -t Number of threads to use (Default 5) –album/ -al Create albums for assets based on the parent folder or a given name –import/ -i Import gallery (assets are not uploaded) 号外还有一个相册工具 PhotoPrism，这是一个优秀的成熟的相册，唯一缺憾就是没有手机客户端。","link":"/2023/08/05/Nas/immich/"},{"title":"替代群晖音乐的工具：Navidrome","text":"Linux下的安装首先安装依赖，navidrome依赖ffmpeg： 123sudo apt updatesudo apt upgradesudo apt install vim ffmpeg 然后创建navidrome工作的目录结构： 12sudo install -d -o &lt;user&gt; -g &lt;group&gt; /opt/navidromesudo install -d -o &lt;user&gt; -g &lt;group&gt; /var/lib/navidrome 下载Navidrome 从GitHub下载最新发布版本（用最新版的下载地址替换下面命令中的地址），解压到程序目录/opt/navidrome，赋予目录可执行权限。 123wget https://github.com/navidrome/navidrome/releases/download/v0.XX.0/navidrome_0.XX.0_Linux_x86_64.tar.gz -O Navidrome.tar.gzsudo tar -xvzf Navidrome.tar.gz -C /opt/navidrome/sudo chown -R &lt;user&gt;:&lt;group&gt; /opt/navidrome 创建配置文件In the working directory, /var/lib/navidrome create a new file named navidrome.toml with the following settings. MusicFolder = ““For additional configuration options see the configuration options page. 12345678910LogLevel = 'DEBUG'ScanSchedule = '@every 24h'TranscodingCacheSize = '150MiB'MusicFolder = '/mnt/music'Port = '6019'DefaultLanguage = 'zh-Hans'EnableSharing = trueEnableTranscodingConfig = trueLastFM.Language = 'zh-Hans'UIWelcomeMessage = 'Redtuxs Family Music Server' 创建系统服务配置文件Create a new file under /etc/systemd/system/ named navidrome.service with the following data. Make sure you replace and with the user and group you want to run Navidrome under. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[Unit]Description=Navidrome Music Server and Streamer compatible with Subsonic/AirsonicAfter=remote-fs.target network.targetAssertPathExists=/var/lib/navidrome[Install]WantedBy=multi-user.target[Service]User=&lt;user&gt;Group=&lt;group&gt;Type=simpleExecStart=/opt/navidrome/navidrome --configfile &quot;/var/lib/navidrome/navidrome.toml&quot;WorkingDirectory=/var/lib/navidromeTimeoutStopSec=20KillMode=processRestart=on-failure# See https://www.freedesktop.org/software/systemd/man/systemd.exec.htmlDevicePolicy=closedNoNewPrivileges=yesPrivateTmp=yesPrivateUsers=yesProtectControlGroups=yesProtectKernelModules=yesProtectKernelTunables=yesRestrictAddressFamilies=AF_UNIX AF_INET AF_INET6RestrictNamespaces=yesRestrictRealtime=yesSystemCallFilter=~@clock @debug @module @mount @obsolete @reboot @setuid @swapReadWritePaths=/var/lib/navidrome# You can uncomment the following line if you're not using the jukebox This# will prevent navidrome from accessing any real (physical) devices#PrivateDevices=yes# You can change the following line to `strict` instead of `full` if you don't# want navidrome to be able to write anything on your filesystem outside of# /var/lib/navidrome.ProtectSystem=full# You can uncomment the following line if you don't have any media in /home/*.# This will prevent navidrome from ever reading/writing anything there.#ProtectHome=true# You can customize some Navidrome config options by setting environment variables here. Ex:#Environment=ND_BASEURL=&quot;/navidrome&quot; 启动Navidrome服务Reload the service daemon, start the newly create service, and verify it has started correctly. 1234sudo systemctl daemon-reloadsudo systemctl start navidrome.servicesudo systemctl status navidrome.servicesudo systemctl restart navidrome.service 如果服务成功启动，你就可以访问http://localhost:4533来访问web端. 让Navidrome随系统启动1sudo systemctl enable navidrome.service 用Nginx配置反向代理反向代理配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041server { listen 619 default_server; listen [::]:619 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don't use them in a production server! # # include snippets/snakeoil.conf; #root /var/www/start; # Add index.php to the list if you are using PHP #index index.html index.htm index.nginx-debian.html; server_name www.redtux.cn; client_max_body_size 50000M; location / { proxy_pass http://192.168.0.6:6019; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Protocol $scheme; proxy_set_header X-Forwarded-Host $http_host; proxy_buffering off; }} 也可以Docker的方式安装，详见官方文档Navidrome官方网站 – 开源音乐服务器，自建云端音乐播放器 客户端Android手机可以从F-Droid直接安装Subtracks或者Ultrasonic，然后设置服务器地址就可以了。 PC可以使用Sonixd客户端，下载地址，下载对应系统的版本。 号外其实还有一个自建音乐流媒体服务器koel——基于php fpm docker界面漂亮，唯一缺点就是手机客户端只能从Google play下载，国内只能用浏览器访问。","link":"/2023/08/05/Nas/navidrome/"},{"title":"使用Acme.sh工具为Ubuntu安装免费ssl证书","text":"安装acme.sh1curl https://get.acme.sh | sh -s email=my@example.com 或者 1wget -O - https://get.acme.sh | sh -s email=my@example.com 如果上面两个连接不成功，可以用下面国内的源： 123git clone https://gitee.com/neilpang/acme.sh.gitcd acme.sh./acme.sh --install -m my@example.com acme会安装到~/acme.sh目录中，安装完成后重新加载Bash： 1source ~/.bashrc 配置acme.sh开启自动更新： 1acme.sh --upgrade --auto-upgrade 选择默认 CA目前 acme.sh 支持四个正式环境 CA，分别是 Let’s Encrypt、Buypass、ZeroSSL 和 SSL.com，默认使用 ZeroSSL，如果需要更换可以使用如下命令： 切换 Let’s Encrypt 1acme.sh --set-default-ca --server letsencrypt 切换 Buypass 1acme.sh --set-default-ca --server buypass 切换 ZeroSSL 1acme.sh --set-default-ca --server zerossl 切换 SSL.com 1acme.sh --set-default-ca --server ssl.com 切换 Google Public CA 1acme.sh --set-default-ca --server google 使用 DNS 验证签发证书家用网络都封了80端口，不能使用正常模式申请证书，只能使用DNS验证的模式申请，acme.sh 的 DNS API 模式申请证书： 1acme.sh --issue --dns dns_cf -d example.com -d *.example.com acme.sh 支持几十种 DNS 插件，常用的下面几种，： 阿里云 –dns dns_ali 12export Ali_Key=&quot;1234&quot;export Ali_Secret=&quot;sADDsdasdgdsf&quot; Dnspod –dns dns_dp 12export DP_Id=&quot;1234&quot;export DP_Key=&quot;sADDsdasdgdsf&quot; Godaddy –dns dns_gd 12export GD_Key=&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;export GD_Secret=&quot;asdfsdfsfsdfsdfdfsdf&quot; AWS –dns dns_aws 12export AWS_ACCESS_KEY_ID=&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;export AWS_SECRET_ACCESS_KEY=&quot;xxxxxxx&quot; Linode –dns dns_linode 1export LINODE_API_KEY=&quot;xxxxxxxx&quot; 证书申请完成后会提示证书位置： 1234[Sat Jul 29 11:51:54 AM UTC 2023] Your cert is in: /root/.acme.sh/redtux.cn/redtux.cn.cer[Sat Jul 29 11:51:54 AM UTC 2023] Your cert key is in: /root/.acme.sh/redtux.cn/redtux.cn.key[Sat Jul 29 11:51:54 AM UTC 2023] The intermediate CA cert is in: /root/.acme.sh/redtux.cn/ca.cer[Sat Jul 29 11:51:54 AM UTC 2023] And the full chain certs is there: /root/.acme.sh/redtux.cn/fullchain.cer 安装证书然后我们可以安装证书 Nginx 12345acme.sh --install-cert -d example.com \\--key-file /etc/nginx/ssl/example.com.key \\--fullchain-file /etc/nginx/ssl/example.com.crt \\--ca-file /etc/nginx/ssl/example.com.ca.crt \\--reloadcmd &quot;systemctl restart nginx&quot; 对应的 Nginx 配置指定证书文件 123ssl_certificate /etc/nginx/ssl/example.com.crt;ssl_certificate_key /etc/nginx/ssl/example.com.key;ssl_trusted_certificate /etc/nginx/ssl/example.com.ca.crt; Apache 12345acme.sh --install-cert -d example.com \\--key-file /etc/apache2/ssl/example.com.key \\--fullchain-file /etc/apache2/ssl/example.com.crt \\--ca-file /etc/apache2/ssl/example.com.ca.crt \\--reloadcmd &quot;curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt;&gt; /etc/apache2/ssl/example.com.crt &amp;&amp; systemctl restart apache2&quot; 对应的 Apache 配置指定证书文件 12SSLCertificateFile /etc/apache2/ssl/example.com.crtSSLCertificateKeyFile /etc/apache2/ssl/example.com.key","link":"/2023/08/05/Nas/ubuntu-ssl-acme/"},{"title":"自建开源远程桌面工具Rustdesk中继服务器","text":"Rustdesk支持Windows、macOS、Linux、iOS、Android、Web等几乎所有平台，客户端可以在官方网站下载，安装后自动分配id，立即可以使用。但是官方免费的服务器速度有点慢，官方还提供了服务器端程序，我们可以用docker来安装： 1234docker volume create rustdesk_server_datadocker run --name hbbs --net=host -v &quot;rustdesk_server_data:/root&quot; -d rustdesk/rustdesk-server:latest hbbs -r www.redtux.cndocker run --name hbbr --net=host -v &quot;rustdesk_server_data:/root&quot; -d rustdesk/rustdesk-server:latest hbbr 这样自建的中继服务器就已经成功运行了，然后在自己的每个客户端设置中继服务器为自己的ip就可以了。","link":"/2023/08/06/Nas/rustdesk-server/"},{"title":"Ubuntu的SSH安全配置","text":"查看登录日志文件：1sudo vim /var/log/auth.log 修改SSH的默认端口1iptables -A INPUT -p tcp -m tcp --dport 6022 -j ACCEPT 保存并重启iptables防火墙 12service iptables saveservice iptables restart 修改SSH的默认端口 1sudo vim /etc/ssh/sshd_config 把 # Port 22 修改为 Port 6022 最好使用1024到65535之间的一个别人猜不到的端口号 重启ssh服务 1sudo service sshd restart 或 1sudo /etc/init.d/ssh restart 可以用iptables检查端口是否开启 禁止SSH的root登录修改 /etc/ssh/sshd_config 文件 1PermitRootLogin no 重启ssh服务 1sudo service sshd restart 禁用密码登陆，使用RSA私钥登录12ssh-keygen #在客户端生成密钥ssh-copy-id myserver1 #将公钥添加至服务端 还需要配置服务端 123sudo vim /etc/ssh/sshd_configPasswordAuthentication no #禁止密码认证PermitEmptyPasswords no #禁止空密码用户登录 重启ssh服务 1sudo service sshd restart 使用 Fail2banUbuntu 16.04 系统源里带有 denyhosts ，到了Ubuntu 20.04默认不再包含。DenyHosts现在几乎不再更新了，所以来使用Fail2ban 检查是否安装了特定软件包 12sudo apt list --installed | grep denyhostssudo apt list --installed | grep fail2ban 安装fail2ban1sudo apt-get install fail2ban 配置fail2ban配置文件在 /etc/fail2ban/jail.conf 。 在配置文件的[DEFAULT]区，可以在此定义所有受监控的服务的默认参数 12345678910111213[DEFAULT]# 以空格分隔的列表，可以是 IP 地址、CIDR 前缀或者 DNS 主机名# 用于指定哪些地址可以忽略 fail2ban 防御ignoreip = 127.0.0.1/8 ::1 # 客户端主机被禁止的时长bantime = 60m# 查找失败次数的时长findtime = 10m # 客户端主机被禁止前允许失败的次数 maxretry = 5 根据上述配置，fail2ban会自动禁止在最近10分钟内有超过5次访问尝试失败的任意IP地址。一旦被禁，这个IP地址将会在1小时内一直被禁止访问 SSH 服务 保存配置后重启服务 1sudo service fail2ban restart 查看fail2ban运行状态验证fail2ban成功运行： 12$ sudo fail2ban-client pingServer replied: pong 检验fail2ban状态 1234$ sudo fail2ban-client statusStatus|- Number of jail: 1`- Jail list: sshd 检验一个特定监狱的状态 1sudo fail2ban-client status 上面的命令会显示出被禁止IP地址列表 解锁特定的IP地址 1sudo fail2ban-client set sshd unbanip 192.168.1.8","link":"/2023/08/06/Nas/ubuntu-ssh/"},{"title":"ffmpeg的常用选项","text":"map选项默认情况下只在输入文件中的每种流里选择第一个流。 需要指定放入输出文件的流就需要使用-map选项。 用法举例： -map 0 From input index #0 (the 1st input) select all streams. -map 1:a From input index #1 (the 2nd input) select all audio streams. -map 3:s:4 From input index #3 (the 4th input) select subtitle stream index #4 (the fifth subtitle stream)。 -map 0 -map -0:s Will select all streams from input index #0 (the 1st input) except subtitles. 改变视频帧率有两种方法可以改变输出文件的视频流帧率： 使用 -r 选项 使用 fps滤镜。 12ffmpeg -i [inputfile] -r 30 [output]ffmpeg -i [inputfiel] -filter:v fps=30 [output] 有两种方法可以改变输出文件的视频流帧率： 改变默认音轨使用ffmpeg修改默认的音频轨道，先取消第二音轨的默认值，在设置为第一音轨。 1ffmpeg -i input.mkv -map 0:0 -map 0:1 -map 0:2 -c copy -disposition:a:1 0 -disposition:a:0 default -y output.mp4 改变音频采样率-ar 48k 44.1k 96k 1ffmpeg -i input.dsf -map 0:0 -c:0 flac -ar:0 96k output.flac 改变音频通道数量-ac 1ffmpeg -i input.dsf -map 0:0 -c:0 flac -ar:0 96k -ac:0 2 -filter:0 aformat=channel_layouts=stereo output.flac 1ffmpeg -i input.dsf -map 0:0 -c:0 flac -ar:0 96k -ac:0 6 -filter:0 aformat=channel_layouts=5.1 output.flac 改变音频位深 bit depth-sample_fmt 1ffmpeg -i input.dsf -map 0:0 -c:0 flac -ar:0 96k -sample_fmt s24 -ac:0 6 -filter:0 aformat=channel_layouts=5.1 output.flac 截取视频片段1ffmpeg -i 源文件名 -vcodec copy -acodec copy -ss 00:00:10 -to 00:00:15 目标文件名 -y 调整播放速度调整视频文件中视频速度：123456789101112131415//2倍速播放ffmpeg -i test.mp4 -an -filter:v &quot;setpts=0.5*PTS&quot; out_test.mp4-i test.mp4是输入文件名 -an 将音频禁掉 （可以不加） -filter:v 对视频进行处理 &quot;setpts=0.5PTS&quot; 设置时间戳参数PTS为原先的一半，可接受调整范围为[0.25,4] out_test.mp4 输出视频文件 还可以在命令中加上指定fps（-r 60），使得不会丢帧 调整视频文件中音频速度：1234567891011121314ffmpeg -i test.mp4 -filter:a &quot;atempo=2.0&quot; -vn out_test.mp4-i 后满test.mp4是输入文件名 -filter:a 对音频进行处理 &quot;atempo=2.0&quot; 设置播放速度是原来的2倍 ， 倍率调整范围[0.5, 2.0] -vn 将视频禁掉 （可以不加） out_test.mp4 输出视频文件 需要调整到4倍可以采取以下方法： ffmpeg -i test.mp4 -filter:a &quot;atempo=2.0,atempo=2.0&quot; -vn out_test.mp4 同时调整视频文件的视频、音频：1ffmpeg -i test.mp4 -filter_complex &quot;[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]&quot; -map &quot;[v]&quot; -map &quot;[a]&quot; out_test.mp4 如果不想丢帧就同时设置 -r ，把帧率设置为原帧率的2倍。 metadata的使用1ffmpeg -i /Users/redtux/Movies/Becoming.Jane.2007.1080p.BluRay.x265.2Audio.mp4 -metadata title=&quot;Becoming.Jane.2007.1080p.BluRay.x265.2Audio-RARBG&quot; -map 0:0 -c:0 copy -metadata:s:0 title='Becoming.Jane.2007.1080p.BluRay.x265-RARBG' -metadata:s:0 handler='Becoming.Jane.2007.1080p.BluRay.x265-RARBG' -map 0:1 -c:1 copy -metadata:s:1 title=&quot;国语配音&quot; -metadata:s:1 handler=&quot;国语配音&quot; -metadata:s:1 language=&quot;chi&quot; -disposition:1 default -map 0:2 -c:2 copy -metadata:s:2 title=&quot;English&quot; -metadata:s:2 handler=&quot;English&quot; -metadata:s:2 language=&quot;eng&quot; -disposition:2 0 /Users/redtux/Movies/Becoming.Jane.2007.1080p.BluRay.x265.2Audio-RARBG.mp4","link":"/2023/08/06/ffmpeg-help/"},{"title":"安装Jellyfin多媒体服务器","text":"由于 Jellyfin 的 GPL 协议和 Intel 的 media-driver (iHD) Linux 驱动（部分开源）在协议上不兼容的缘故，Jellyfin 官方的 Docker 镜像：jellyfin/jellyfin 并不包含 Intel Linux 核显驱动。但是 Intel 的 QuickSync QSV 硬件加速依赖于该驱动，并且 Intel 10 代酷睿（Comet Lake）以及更新的处理器需要该驱动才能正常使用硬件加速。另外 VPP/OpenCL 色调映射也需要该驱动才能正常运作。 开发者提供的中国特供版镜像Docker 镜像： docker pull nyanmisaka/jellyfin:latest Jellyfin中国特供版+Docker镜像，含驱动，免折腾开箱即用 12345678910111213141516sudo docker run -d --name=Jellyfin -p 8096:8096 \\ # --name=Jellyfin 将容器名定义为 Jellyfin -p 8920:8920 -p 7359:7359/udp -p 1900:1900/udp #这三个端口为可选项 \\ -v /var/docker/jellyfin/library:/config -v /var/docker/jellyfin/cache:/cache -v /data/media:/media \\ -e TZ=Asia/Shanghai -e PUID=0 -e PGID=0 \\ #将容器的时区设为上海,使用窗口在运行时使用root权限 --device=/dev/dri:/dev/dri \\ #直通显卡给 Docker 容器，用于硬解 --add-host=api.themoviedb.org:13.224.161.90 \\ #为容器增加 host 指向，加速海报与影视元数据的搜刮 --add-host=api.themoviedb.org:13.35.8.65 \\ --add-host=api.themoviedb.org:13.35.8.93 \\ --add-host=api.themoviedb.org:13.35.8.6 \\ --add-host=api.themoviedb.org:13.35.8.54 \\ --add-host=image.tmdb.org:138.199.37.230 \\ --add-host=image.tmdb.org:108.138.246.49 \\ --add-host=api.thetvdb.org:13.225.89.239 \\ --add-host=api.thetvdb.org:192.241.234.54 \\ --restart unless-stopped \\ jellyfin/jellyfin:latest 1.如果使用 linuxserver/jellyfin 镜像，就把最后一行替换为下行 1lscr.io/linuxserver/jellyfin:latest 2.如果使用 nyanmisaka/jellyfin 镜像，最把最后一行替换为下行 1nyanmisaka/jellyfin:latest 端口说明： 端口号 用途 可选项 8096 默认http端口号 必须 8920 默认https端口号 可选 7359 让同一局域网中的客户端设备自动发现 可选 1900 DLNA的端口 可选","link":"/2023/08/06/Nas/jellyfin/"},{"title":"ACE Editor修改自动换号缩进","text":"https://stackoverflow.com/questions/38323427/remove-word-wrap-offset-in-ace-editor This is controlled by indentedSoftWrap setting in ace, you can turn it off by running 1editor.setOption(&quot;indentedSoftWrap&quot;, false); behaviours setting is completely unrelated and controls automatic insertion of closing brackets and tags. So your code from the above would become 123456789var editor = ace.edit(&quot;edittext&quot;);editor.setOptions({ maxLines: Infinity, // this is going to be very slow on large documents useWrapMode: true, // wrap text to view indentedSoftWrap: false, behavioursEnabled: false, // disable autopairing of brackets and tags showLineNumbers: false, // hide the gutter theme: &quot;ace/theme/xcode&quot;});","link":"/2023/08/06/ACE-Editor/"},{"title":"Qt的宏定义区分不同操作系统","text":"程序中遇到需要区分操作系统时，可使用qt的宏定义： 在中，定义了各个系统的宏定义 Q_OS_AIXDefined on AIX.Q_OS_ANDROIDDefined on Android.Q_OS_BSD4Defined on Any BSD 4.4 system.Q_OS_BSDIDefined on BSD/OS.Q_OS_CYGWINDefined on Cygwin.Q_OS_DARWINDefined on Darwin-based operating systems such as macOS, iOS, watchOS, and tvOS.Q_OS_DGUXDefined on DG/UX.Q_OS_DYNIXDefined on DYNIX/ptx.Q_OS_FREEBSDDefined on FreeBSD.Q_OS_HPUXDefined on HP-UX.Q_OS_HURDDefined on GNU Hurd.Q_OS_IOSDefined on iOS.Q_OS_IRIXDefined on SGI Irix.Q_OS_LINUXDefined on Linux.Q_OS_LYNXDefined on LynxOS.Q_OS_MACDeprecated synonym for Q_OS_DARWIN. Do not use.Q_OS_MACOSDefined on macOS.Q_OS_NETBSDDefined on NetBSD.Q_OS_OPENBSDDefined on OpenBSD.Q_OS_OSFDefined on HP Tru64 UNIX.Q_OS_OSXDeprecated synonym for Q_OS_MACOS. Do not use.Q_OS_QNXDefined on QNX Neutrino.Q_OS_RELIANTDefined on Reliant UNIX.Q_OS_SCODefined on SCO OpenServer 5.Q_OS_SOLARISDefined on Sun Solaris.Q_OS_TVOSDefined on tvOS.Q_OS_ULTRIXDefined on DEC Ultrix.Q_OS_UNIXDefined on Any UNIX BSD/SYSV system.Q_OS_UNIXWAREDefined on UnixWare 7, Open UNIX 8.Q_OS_WATCHOSDefined on watchOS.Q_OS_WIN32Defined on 32-bit and 64-bit versions of Windows.Q_OS_WIN64Defined on 64-bit versions of Windows.Q_OS_WINDefined on all supported versions of Windows. That is, if Q_OS_WIN32, Q_OS_WIN64, or Q_OS_WINRT is defined.Q_OS_WINPHONEDefined on Windows Phone 8.Q_OS_WINRTDefined for Windows Runtime (Windows Store apps) on Windows 8, Windows RT, and Windows Phone 8. 举例1：记得需要有QObject的头文件，才可以 1234567#include&lt;QObject&gt;#ifdef Q_OS_WIN#include &lt;winsock2.h&gt;#endif#include &lt;mysql.h&gt; 举例2：对于标记了Q_OBJECT这个宏的类，其成员函数可以直接上面的区分操作系统的这些宏定义。 ***.h文件： 1234567891011class DetailStepInfo : public QObject{ Q_OBJECTpublic: .................... ...................} ***.cpp文件： 12345678910111213141516bool DetailStepInfo::**************(){ #ifdef Q_OS_WIN#endif#ifdef Q_OS_LINUX QString command = QString(&quot;chmod +rw /****************************&quot;); QProcess proc; proc.execute(command);#endif ........................... }","link":"/2023/08/06/Qt/qt-os-define/"},{"title":"Qt实现弹出窗口，点击其他位置消失","text":"Qt实现弹出窗口，点击其他位置消失 一开始时想的很美好，写button的点击事件，然后在弹窗界面中写eventFilter(QEvent *e)事件 12345678if (event-&gt;type() == QEvent::ActivationChange) { if(QApplication::activeWindow() != this) { this-&gt;close(); } } return QWidget::event(event); 但是这样写发现一个问题，当我想实现点击按钮也可以关闭dialog时，不行了，因为EventFilter是第一触发事件，当我点按钮是，判断当前的活动窗口不是dialog，他先关闭，然后触发按钮的点击事件，再打开了dialog。很麻烦。 后来有了解到Qt有一个popup的属性 1info-&gt;setWindowFlags(Qt::FramelessWindowHint | Qt::Popup); 这样设置了之后，窗口是无边框且是点击其他位置关闭，但是还是会有上面的问题，没解决。 再后来，在一篇blog中看到了Qt::WA_NoMouseReplay属性机翻一下：用于弹出窗口小部件。指示在弹出小部件关闭时不应重播最近的鼠标按下事件。该标志由小部件的作者设置，并在小部件每次接收到新的鼠标事件时由Qt内核清除。大意就是它会拦截鼠标事件不会传递，专用于弹窗事件。呜呜呜，原来Qt早就搞定了这个事件，找了半天，还是Qt不熟悉。具体使用，在弹出的窗口里重写mousePressEvent(QMouseEvent *e)事件： 12345void InfoDialog::mousePressEvent(QMouseEvent *e){ setAttribute(Qt::WA_NoMouseReplay); QDialog::mousePressEvent(e);}","link":"/2023/08/06/Qt/qt-pop-dialog/"},{"title":"Microsoft Office及Windows的KMS激活步骤","text":"Microsoft Office KMS激活步骤： 以管理员用户打开命令行工具； 切换到office的安装目录，例如office2016安装路径为C:\\\\Program Files\\\\Microsoft Office\\\\Office16； 设置kms服务器：cscript ospp.vbs /sethst:[kms.03k.org](http://kms.03k.org)，返回信息； 12345678910---Processing-----------------------------------------------------------------Successfully applied setting.------------------------------------------Exiting----------------------------- 激活office：`cscript ospp.vbs /act`。 1234567891011121314151617181920212223---Processing-----------------------------------------------------------------Installed product key detected - attempting to activate the following product:SKU ID: d450596f-894d-49e0-966a-fd39ed4c4c64LICENSE NAME: Office 16, Office16ProPlusVL_KMS_Client editionLICENSE DESCRIPTION: Office 16, VOLUME_KMSCLIENT channelLast 5 characters of installed product key: WFG99&lt;Product activation successful&gt;---------------------------------------------------------------------------------Exiting----------------------------- Microsoft Windows KMS激活步骤：1234567891011121314# 卸载已安装密钥slmgr.vbs /upk# 安装需要激活的版本密钥# 这里以专业版为例，Windows 10 和 11 通用# 更多版本的系统密钥见下文slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX# 设置 KMS 激活服务器# 请将 192.168.7.186 替换为实际 KMS 服务器网址或 IPslmgr /skms 192.168.7.186# 激活slmgr /ato 所有WINDOWS版本的GVLK密钥对照表GVLK密钥是专门用于KMS激活的密钥，如果想使用KMS激活，那么必须先将系统的KEY替换为对应版本的GVLK密钥。 KMS不仅可以激活Windows 8、Windows 8.1和Windows 7、Windows 10这类我们常用的系统，还可以激活各种版本的Windows Server系统。 以下是GVLK密钥版本对照表，可配合KMS服务器进行使用。 WINDOWS SERVER 半年频道版本Windows Server 版本 1909、版本1903 和版本 1809 操作系统版本 KMS 客户端安装程序密钥 Windows Server Datacenter 6NMRW-2C8FM-D24W7-TQWMY-CWH2D Windows Server Standard N2KJX-J94YW-TQVFB-DG9YT-724CC WINDOWS SERVER LTSC/LTSB 版本Windows Server 2019 操作系统版本 KMS 客户端安装程序密钥 Windows Server 2019 Datacenter WMDGN-G9PQG-XVVXX-R3X43-63DFG Windows Server 2019 Standard N69G4-B89J2-4G8F4-WWYCC-J464C Windows Server 2019 Essentials WVDHN-86M7X-466P6-VHXV7-YY726 Windows Server 2016 操作系统版本 KMS 客户端安装程序密钥 Windows Server 2016 Datacenter CB7KF-BWN84-R7R2Y-793K2-8XDDG Windows Server 2016 Standard WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY Windows Server 2016 Essentials JCKRF-N37P4-C2D82-9YXRT-4M63B WINDOWS 10，所有支持的半年频道版本有关受支持的版本和服务终止日期的信息，请参阅 Windows 生命周期情况说明书。 操作系统版本 KMS 客户端安装程序密钥 Windows 10 专业版 W269N-WFGWX-YVC9B-4J6C9-T83GX Windows 10 专业版 N MH37W-N47XK-V7XM9-C7227-GCQG9 Windows 10 专业工作站版 NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J Windows 10 专业工作站版 N 9FNHH-K3HBT-3W4TD-6383H-6XYWF Windows 10 专业教育版 6TP4R-GNPTD-KYYHQ-7B7DP-J447Y Windows 10 专业教育版 N YVWGF-BXNMC-HTQYQ-CPQ99-66QFC Windows 10 教育版 NW6C2-QMPVW-D7KKK-3GKT6-VCFB2 Windows 10 教育版 N 2WH4N-8QGBV-H22JP-CT43Q-MDWWJ Windows 10 企业版 NPPR9-FWDCX-D2C8J-H872K-2YT43 Windows 10 企业版 N DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4 Windows 10 企业版 G YYVX9-NTFWV-6MDM3-9PT4T-4M68B Windows 10 企业版 G N 44RPN-FTY23-9VTTB-MP9BX-T84FV WINDOWS 10 LTSC/LTSB 版本Windows 10 LTSC 2019 操作系统版本 KMS 客户端安装程序密钥 Windows 10 企业版 LTSC 2019 M7XTQ-FN8P6-TTKYV-9D4CC-J462D Windows 10 企业版 N LTSC 2019 92NFX-8DJQP-P6BBQ-THF9C-7CG2H Windows 10 LTSB 2016 操作系统版本 KMS 客户端安装程序密钥 Windows 10 企业版 LTSB 2016 DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ Windows 10 企业版 N LTSB 2016 QFFDN-GRT3P-VKWWX-X7T3R-8B639 Windows 10 LTSB 2015 操作系统版本 KMS 客户端安装程序密钥 Windows 10 企业版 2015 LTSB WNMTR-4C88C-JK8YV-HQ7T2-76DF9 Windows 10 企业版 2015 LTSB N 2F77B-TNFGY-69QQF-B8YKP-D69TJ 早期版本的 WINDOWS SERVERWindows Server 版本 1803 操作系统版本 KMS 客户端安装程序密钥 Windows Server Datacenter 2HXDN-KRXHB-GPYC7-YCKFJ-7FVDG Windows Server Standard PTXN8-JFHJM-4WC78-MPCBR-9W4KR Windows Server 版本 1709 操作系统版本 KMS 客户端安装程序密钥 Windows Server Datacenter 6Y6KB-N82V8-D8CQV-23MJW-BWTG6 Windows Server Standard DPCNP-XQFKJ-BJF7R-FRC8D-GF6G4 Windows Server 2012 R2 操作系统版本 KMS 客户端安装程序密钥 Windows Server 2012 R2 Server Standard D2N9P-3P6X9-2R39C-7RTCD-MDVJX Windows Server 2012 R2 Datacenter W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9 Windows Server 2012 R2 Essentials KNC87-3J2TX-XB4WP-VCPJV-M4FWM Windows Server 2012 操作系统版本 KMS 客户端安装程序密钥 Windows Server 2012 BN3D2-R7TKB-3YPBD-8DRP2-27GG4 Windows Server 2012 N 8N2M2-HWPGY-7PGT9-HGDD8-GVGGY Windows Server 2012 单语言版 2WN2H-YGCQR-KFX6K-CD6TF-84YXQ Windows Server 2012 特定国家/地区版 4K36P-JN4VD-GDC6V-KDT89-DYFKP Windows Server 2012 Server 标准版 XC9B7-NBPP2-83J2H-RHMBY-92BT4 Windows Server 2012 MultiPoint 标准版 HM7DN-YVMH3-46JC3-XYTG7-CYQJJ Windows Server 2012 MultiPoint 高级版 XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G Windows Server 2012 Datacenter 48HP8-DN98B-MYWDG-T2DCC-8W83P Windows Server 2008 R2 操作系统版本 KMS 客户端安装程序密钥 Windows Server 2008 R2 Web 版 6TPJF-RBVHG-WBW2R-86QPH-6RTM4 Windows Server 2008 R2 HPC 版 TT8MH-CG224-D3D7Q-498W2-9QCTX Windows Server 2008 R2 标准版 YC6KT-GKW9T-YTKYR-T4X34-R7VHC Windows Server 2008 R2 企业版 489J6-VHDMP-X63PK-3K798-CPX3Y Windows Server 2008 R2 Datacenter 74YFP-3QFB3-KQT8W-PMXWJ-7M648 面向基于 Itanium 系统的 Windows Server 2008 R2 GT63C-RJFQ3-4GMB6-BRFB9-CB83V Windows 2008 Server 操作系统版本 KMS 客户端安装程序密钥 Windows Web Server 2008 WYR28-R7TFJ-3X2YQ-YCY4H-M249D Windows Server 2008 标准版 TM24T-X9RMF-VWXK6-X8JC9-BFGM2 不带 Hyper-V 的 Windows Server 2008 标准版 W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ Windows Server 2008 企业版 YQGMW-MPWTJ-34KDK-48M3W-X4Q6V 不带 Hyper-V 的 Windows Server 2008 企业版 39BXF-X8Q23-P2WWT-38T2F-G3FPG Windows Server 2008 HPC RCTX3-KWVHP-BR6TB-RB6DM-6X7HP Windows Server 2008 Datacenter 7M67G-PC374-GR742-YH8V4-TCBY3 不带 Hyper-V 的 Windows Server 2008 数据中心版 22XQ2-VRXRG-P8D42-K34TD-G3QQC 面向基于 Itanium 系统的 Windows Server 2008 4DWFP-JF3DJ-B7DTH-78FJB-PDRHK 早期版本的 WINDOWSWindows 8.1 操作系统版本 KMS 客户端安装程序密钥 Windows 8.1 专业版 GCRJD-8NW9H-F2CDX-CCM8D-9D6T9 Windows 8.1 专业版 N HMCNV-VVBFX-7HMBH-CTY9B-B4FXY Windows 8.1 企业版 MHF9N-XY6XB-WVXMC-BTDCT-MKKG7 Windows 8.1 企业版 N TT4HM-HN7YT-62K67-RGRQJ-JFFXW Windows 8 操作系统版本 KMS 客户端安装程序密钥 Windows 8 专业版 NG4HW-VH26C-733KW-K6F98-J8CK4 Windows 8 专业版 N XCVCF-2NXM9-723PB-MHCB7-2RYQQ Windows 8 企业版 32JNW-9KQ84-P47T8-D8GGY-CWCK7 Windows 8 企业版 N JMNMF-RHW7P-DMY6X-RF3DR-X2BQT Windows 7 操作系统版本 KMS 客户端安装程序密钥 Windows 7 专业版 FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4 Windows 7 专业版 N MRPKT-YTG23-K7D7T-X2JMM-QY7MG Windows 7 专业版 E W82YF-2Q76Y-63HXB-FGJG9-GF7QX Windows 7 企业版 33PXH-7Y6KF-2VJC9-XBBR8-HVTHH Windows 7 企业版 N YDRBP-3D83W-TY26F-D46B2-XCKRJ Windows 7 企业版 E C29WB-22CC8-VJ326-GHFJW-H9DH4","link":"/2023/08/14/windows-office-kms/"},{"title":"自建Nextcloud私有云盘","text":"安装从Nextcloud官方网站下载server的安装包，复制到/var/www目录解压。 详细安装过程参考官方文档 1、按照官方文档安装完善php模块必须要安装的模块 PHP (see System requirements for a list of supported versions) PHP module ctype PHP module curl PHP module dom PHP module fileinfo (included with PHP) PHP module filter (only on Mageia and FreeBSD) PHP module GD PHP module hash (only on FreeBSD) PHP module JSON (included with PHP &gt;= 8.0) PHP module libxml (Linux package libxml2 must be &gt;=2.7.0) PHP module mbstring PHP module openssl (included with PHP &gt;= 8.0) PHP module posix PHP module session PHP module SimpleXML PHP module XMLReader PHP module XMLWriter PHP module zip PHP module zlib 选择合适的数据库模块： PHP module pdo_sqlite (&gt;= 3, usually not recommended for performance reasons) PHP module pdo_mysql (MySQL/MariaDB) PHP module pdo_pgsql (PostgreSQL) 推荐安装的模块： PHP module bz2 (recommended, required for extraction of apps) PHP module intl (increases language translation performance and fixes sorting of non-ASCII characters) 2、Apache配置文件新增配置文件vim /etc/apache2/sites-available/nextcloud.conf，复制以下内容： 1234567891011121314&lt;VirtualHost *:80&gt; DocumentRoot /var/www/nextcloud/ ServerName your.server.com &lt;Directory /var/www/nextcloud/&gt; Require all granted AllowOverride All Options FollowSymLinks MultiViews &lt;IfModule mod_dav.c&gt; Dav off &lt;/IfModule&gt; &lt;/Directory&gt;&lt;/VirtualHost&gt; 保存，然后运行： 1a2ensite nextcloud.conf 启用必要的Apache模块： 123456a2enmod rewritea2enmod headersa2enmod enva2enmod dira2enmod mime If you’re running mod_fcgi instead of the standard mod_php also enable: 1a2enmod setenvif 最后重启Apache： 1service apache2 restart 现在就可以访问http://your.server.com安装Nextcloud。 Redis缓存配置修改配置文件nextcloud/config/config.php： Small/Private home serverOnly use APCu: 1'memcache.local' =&gt; '\\OC\\Memcache\\APCu', Organizations with single-serverUse Redis for everything except local memcache: 1234567'memcache.local' =&gt; '\\OC\\Memcache\\APCu','memcache.distributed' =&gt; '\\OC\\Memcache\\Redis','memcache.locking' =&gt; '\\OC\\Memcache\\Redis','redis' =&gt; [ 'host' =&gt; 'localhost', 'port' =&gt; 6379,], Organizations with clustered setupsUse APCu for local cache and either Redis cluster …: 123456789'memcache.local' =&gt; '\\OC\\Memcache\\APCu','memcache.distributed' =&gt; '\\OC\\Memcache\\Redis','memcache.locking' =&gt; '\\OC\\Memcache\\Redis','redis.cluster' =&gt; [ 'seeds' =&gt; [ // provide some/all of the cluster servers to bootstrap discovery, port required 'cache-cluster:7000', 'cache-cluster:7001', ], ] APCu is disabled by default on CLI which could cause issues with nextcloud’s cron jobs. Please make sure you set the apc.enable_cli to 1 on your php.ini config file or append --define apc.enable_cli=1 to the cron job call. 1vim /etc/php/8.1/cli/php.ini 在末尾添加apc.enable_cli=1，否则当你运行occ命令的时候也会提示你APCu不可用。 OCC命令的使用直接运行occ命令，不带任何选项，就会列出occ命令的所有可用的选项和用法： 1sudo -u www-data php8.1 /var/www/nextcloud/occ 返回信息： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207Nextcloud 24.0.12Usage: command [options] [arguments]Options: -h, --help Display this help message -q, --quiet Do not output any message -V, --version Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n, --no-interaction Do not ask any interactive question --no-warnings Skip global warnings, show command output only -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debugAvailable commands: check check dependencies of the server environment help Display help for a command list List commands status show some status information upgrade run upgrade routines after installation of a new release. The release has to be installed before. activity activity:send-mails Sends the activity notification mails app app:check-code check code to be compliant app:disable disable an app app:enable enable an app app:getpath Get an absolute path to the app directory app:install install an app app:list List all available apps app:remove remove an app app:update update an app or all apps background background:ajax Use ajax to run background jobs background:cron Use cron to run background jobs background:webcron Use webcron to run background jobs background-job background-job:execute Execute a single background job manually broadcast broadcast:test test the SSE broadcaster circles circles:check Checking your configuration circles:maintenance Clean stuff, keeps the app running circles:manage:config edit config/type of a Circle circles:manage:create create a new circle circles:manage:destroy destroy a circle by its ID circles:manage:details get details about a circle by its ID circles:manage:edit edit displayName or description of a Circle circles:manage:join emulate a user joining a Circle circles:manage:leave simulate a user joining a Circle circles:manage:list listing current circles circles:manage:setting edit setting for a Circle circles:members:add Add a member to a Circle circles:members:details get details about a member by its ID circles:members:level Change the level of a member from a Circle circles:members:list listing Members from a Circle circles:members:remove remove a member from a circle circles:members:search Change the level of a member from a Circle circles:memberships index and display memberships for local and federated users circles:remote remote features circles:shares:files listing shares files circles:sync Sync Circles and Members circles:test testing some features config config:app:delete Delete an app config value config:app:get Get an app config value config:app:set Set an app config value config:import Import a list of configs config:list List all configs config:system:delete Delete a system config value config:system:get Get a system config value config:system:set Set a system config value dav dav:create-addressbook Create a dav addressbook dav:create-calendar Create a dav calendar dav:delete-calendar Delete a dav calendar dav:list-calendars List all calendars of a user dav:move-calendar Move a calendar from an user to another dav:remove-invalid-shares Remove invalid dav shares dav:retention:clean-up dav:send-event-reminders Sends event reminders dav:sync-birthday-calendar Synchronizes the birthday calendar dav:sync-system-addressbook Synchronizes users to the system addressbook db db:add-missing-columns Add missing optional columns to the database tables db:add-missing-indices Add missing indices to the database tables db:add-missing-primary-keys Add missing primary keys to the database tables db:convert-filecache-bigint Convert the ID columns of the filecache to BigInt db:convert-mysql-charset Convert charset of MySQL/MariaDB to use utf8mb4 db:convert-type Convert the Nextcloud database to the newly configured one encryption encryption:change-key-storage-root Change key storage root encryption:decrypt-all Disable server-side encryption and decrypt all files encryption:disable Disable encryption encryption:enable Enable encryption encryption:encrypt-all Encrypt all files for all users encryption:list-modules List all available encryption modules encryption:migrate-key-storage-format Migrate the format of the keystorage to a newer format encryption:set-default-module Set the encryption default module encryption:show-key-storage-root Show current key storage root encryption:status Lists the current status of encryption federation federation:sync-addressbooks Synchronizes addressbooks of all federated clouds files files:cleanup cleanup filecache files:recommendations:recommend files:repair-tree Try and repair malformed filesystem tree structures files:scan rescan filesystem files:scan-app-data rescan the AppData folder files:transfer-ownership All files and folders are moved to another user - outgoing shares and incoming user file shares (optionally) are moved as well. files_external files_external:applicable Manage applicable users and groups for a mount files_external:backends Show available authentication and storage backends files_external:config Manage backend configuration for a mount files_external:create Create a new mount configuration files_external:delete Delete an external mount files_external:export Export mount configurations files_external:import Import mount configurations files_external:list List configured admin or personal mounts files_external:notify Listen for active update notifications for a configured external mount files_external:option Manage mount options for a mount files_external:verify Verify mount configuration group group:add Add a group group:adduser add a user to a group group:delete Remove a group group:info Show information about a group group:list list configured groups group:removeuser remove a user from a group integrity integrity:check-app Check integrity of an app using a signature. integrity:check-core Check integrity of core code using a signature. integrity:sign-app Signs an app using a private key. integrity:sign-core Sign core using a private key. l10n l10n:createjs Create javascript translation files for a given app log log:file manipulate logging backend log:manage manage logging configuration log:tail Tail the nextcloud logfile log:watch Watch the nextcloud logfile maintenance maintenance:data-fingerprint update the systems data-fingerprint after a backup is restored maintenance:mimetype:update-db Update database mimetypes and update filecache maintenance:mimetype:update-js Update mimetypelist.js maintenance:mode set maintenance mode maintenance:repair repair this installation maintenance:repair-share-owner repair invalid share-owner entries in the database maintenance:theme:update Apply custom theme changes maintenance:update:htaccess Updates the .htaccess file notification notification:generate Generate a notification for the given user notification:test-push Generate a notification for the given user preview preview:repair distributes the existing previews into subfolders preview:reset-rendered-texts Deletes all generated avatars and previews of text and md files security security:bruteforce:reset resets bruteforce attemps for given IP address security:certificates list trusted certificates security:certificates:import import trusted certificate in PEM format security:certificates:remove remove trusted certificate serverinfo serverinfo:update-storage-statistics Triggers an update of the counts related to storages used in serverinfo sharing sharing:cleanup-remote-storages Cleanup shared storage entries that have no matching entry in the shares_external table sharing:expiration-notification Notify share initiators when a share will expire the next day. support support:report Generate a system report tag tag:add Add new tag tag:delete delete a tag tag:edit edit tag attributes tag:list list tags text text:reset Reset a text document theming theming:config Set theming app config values trashbin trashbin:cleanup Remove deleted files trashbin:expire Expires the users trashbin trashbin:restore Restore all deleted files trashbin:size Configure the target trashbin size twofactorauth twofactorauth:cleanup Clean up the two-factor user-provider association of an uninstalled/removed provider twofactorauth:disable Disable two-factor authentication for a user twofactorauth:enable Enable two-factor authentication for a user twofactorauth:enforce Enabled/disable enforced two-factor authentication twofactorauth:state Get the two-factor authentication (2FA) state of a user update update:check Check for server and app updates user user:add adds a user user:add-app-password Add app password for the named user user:delete deletes the specified user user:disable disables the specified user user:enable enables the specified user user:info show user info user:lastseen shows when the user was logged in last time user:list list configured users user:report shows how many users have access user:resetpassword Resets the password of the named user user:setting Read and modify user settings versions versions:cleanup Delete versions versions:expire Expires the users file versions workflows workflows:list Lists configured workflows 扫描所有用户文件更新： 1sudo -u www-data php8.1 /var/www/nextcloud/occ files:scan --all 扫描特定用户文件更新： 1sudo -u www-data php8.1 /var/www/nextcloud/occ files:scan username 扫描特定目录文件更新： 1sudo -u www-data php8.1 /var/www/nextcloud/occ files:scan --path=/path/to/scan 后台服务优化后台服务有三种方式：AJAX，Webcron，Cron systemd If systemd is installed on the system, a systemd timer could be an alternative to a cronjob. This approach requires two files: nextcloudcron.service and nextcloudcron.timer. Create these two files in /etc/systemd/system/. nextcloudcron.service should look like this: 1234567[Unit]Description=Nextcloud cron.php job[Service]User=www-dataExecStart=/usr/bin/php -f /var/www/nextcloud/cron.phpKillMode=process Replace the user www-data with the user of your http server and /var/www/nextcloud/cron.php with the location of cron.php in your nextcloud directory. The KillMode=process setting is necessary for external programs that are started by the cron job to keep running after the cron job has finished. Note that the .service unit file does not need an [Install] section. Please check your setup because we recommended it in earlier versions of this admin manual. nextcloudcron.timer should look like this: 12345678910[Unit]Description=Run Nextcloud cron.php every 5 minutes[Timer]OnBootSec=5minOnUnitActiveSec=5minUnit=nextcloudcron.service[Install]WantedBy=timers.target The important parts in the timer-unit are OnBootSec and OnUnitActiveSec. OnBootSec will start the timer 5 minutes after boot, otherwise you would have to start it manually after every boot. OnUnitActiveSec will set a 5 minute timer after the service-unit was last activated. Now all that is left is to start and enable the timer by running this command: 1systemctl enable --now nextcloudcron.timer When the option --now is used with enable, the respective unit will also be started.","link":"/2023/08/15/Nas/nextcloud/"}],"tags":[{"name":"Skills","slug":"Skills","link":"/tags/Skills/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"Qt","slug":"Qt","link":"/tags/Qt/"},{"name":"Nas工具","slug":"Nas工具","link":"/tags/Nas%E5%B7%A5%E5%85%B7/"},{"name":"ffmpeg","slug":"ffmpeg","link":"/tags/ffmpeg/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"kms激活","slug":"kms激活","link":"/tags/kms%E6%BF%80%E6%B4%BB/"}],"categories":[{"name":"备忘录","slug":"备忘录","link":"/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"},{"name":"Qt","slug":"Qt","link":"/categories/Qt/"},{"name":"Ubuntu2Nas","slug":"Ubuntu2Nas","link":"/categories/Ubuntu2Nas/"}],"pages":[]}